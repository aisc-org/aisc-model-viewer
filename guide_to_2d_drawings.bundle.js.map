{"version":3,"file":"guide_to_2d_drawings.bundle.js","mappings":"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","sources":["webpack://aisc-model-viewer/webpack/runtime/chunk loaded","webpack://aisc-model-viewer/./src/guide-to-2d-drawings/linework.md","webpack://aisc-model-viewer/./src/guide-to-2d-drawings/bolts-and-welds.md","webpack://aisc-model-viewer/./src/guide-to-2d-drawings/guide.ts","webpack://aisc-model-viewer/./src/guide-to-2d-drawings/types-of-drawings.md","webpack://aisc-model-viewer/./src/guide-to-2d-drawings/abbreviations.md","webpack://aisc-model-viewer/webpack/bootstrap","webpack://aisc-model-viewer/webpack/runtime/define property getters","webpack://aisc-model-viewer/webpack/runtime/global","webpack://aisc-model-viewer/webpack/runtime/hasOwnProperty shorthand","webpack://aisc-model-viewer/webpack/runtime/publicPath","webpack://aisc-model-viewer/webpack/runtime/jsonp chunk loading","webpack://aisc-model-viewer/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// Imports\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./linework-3d.svg\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_1___ = new URL(\"./linework-top.svg\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_2___ = new URL(\"./linework-side.svg\", import.meta.url);\n// Module\nvar code = `<h1 id=\"linework\">Linework</h1> <p>Different types of lines are used in structural drawings to represent different things. Common line types include:</p> <ul> <li><strong>Visible object lines</strong> are solid and define the outline of a physical object.</li> <li><strong>Hidden object lines</strong> are dashed and define a physical object or surface that is not visible in the current view.</li> <li><strong>Centerlines</strong> have alternating long and short dashes and define the center of an object.</li> <li><strong>Break lines</strong> have a zig-zag in the middle and are used to stop drawing an object when showing it in its entirety is not necessary. </li> <li><strong>Section cuts</strong> show where an object is sliced and viewing orientation to create a section view.</li> <li><strong>Extension and dimension lines</strong> are used to indicate dimensions on a drawing.</li> <li><strong>Leader lines</strong> have an arrow at one end and a note at the other and are used to call out information.</li> </ul> <p>Several of these types of lines are illustrated in the figures below.</p> <figure> <img src=\"${___HTML_LOADER_IMPORT_0___}\" alt=\"\"/><figcaption>Three-dimensional view</figcaption> </figure> <figure> <img src=\"${___HTML_LOADER_IMPORT_1___}\" alt=\"\"/><figcaption>Top view</figcaption> </figure> <figure> <img src=\"${___HTML_LOADER_IMPORT_2___}\" alt=\"\"/><figcaption>Side view</figcaption> </figure> `;\n// Exports\nexport default code;","// Imports\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./weld-symbols-1.svg\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_1___ = new URL(\"./weld-symbols-2.svg\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_2___ = new URL(\"./weld-symbols-3.svg\", import.meta.url);\n// Module\nvar code = `<h1 id=\"displaying-bolts-and-welds\">Displaying Bolts and Welds</h1> <h2 id=\"bolts\">Bolts</h2> <p>Bolts are complex three-dimensional objects with many features. They can be depicted in structural drawings with varying levels of detail, ranging from a simple line indicating the center of the bolt to a realistic depiction including each facet of the bolt, nut, and washer. Regardless of how detailed they are shown in the drawings, the important information regarding the bolts (e.g., quantity, diameter, grade) is typically called out in text.</p> <h2 id=\"welds\">Welds</h2> <p>The physical extent of welds is typically not shown in structural drawings. Instead, standard weld symbols are used to communicate the size, type, and length of weld along with other pertinent information. A guide to weld symbols can be found in Table 8-2 of the AISC <em>Manual</em>. The figures below describe key aspects of weld symbols for fillet welds.</p> <figure> <img src=\"${___HTML_LOADER_IMPORT_0___}\" alt=\"\"/><figcaption>Weld symbols for fillet welds</figcaption> </figure> <figure> <img src=\"${___HTML_LOADER_IMPORT_1___}\" alt=\"\"/><figcaption>5/16\" fillet weld on arrow side of joint</figcaption> </figure> <figure> <img src=\"${___HTML_LOADER_IMPORT_2___}\" alt=\"\"/><figcaption>5/16\" fillet weld, 12\" long, on both sides of joint</figcaption> </figure> `;\n// Exports\nexport default code;","import { App, HtmlItem } from '../app'\n\n// Content\nimport typesOfDrawings from './types-of-drawings.md'\nimport linework from './linework.md'\nimport boltsAndWelds from './bolts-and-welds.md'\nimport abbreviations from './abbreviations.md'\n\n// Images/assets\nimport './linework-3d.svg'\nimport './linework-top.svg'\nimport './linework-side.svg'\nimport './weld-symbols-1.svg'\nimport './weld-symbols-2.svg'\nimport './weld-symbols-3.svg'\n\n\nnew App({\n    title: 'Guide to 2D drawings',\n    groups: [\n        {\n            name: '',\n            items: [\n                new HtmlItem({ name: 'Types of drawings', content: typesOfDrawings }),\n                new HtmlItem({ name: 'Linework', content: linework }),\n                new HtmlItem({ name: 'Bolts and welds', content: boltsAndWelds }),\n                new HtmlItem({ name: 'Abbreviations', content: abbreviations }),\n            ]\n        }\n    ],\n    contributors: [\n        'Mark Denavit',\n        'Peter Talley',\n    ],\n    addGuideLink: false,\n})\n","// Module\nvar code = `<h1 id=\"types-of-structural-drawings\">Types of Structural Drawings</h1> <p>Drawings are the primary way structural engineers communicate their designs. Together with architectural, electrical, and mechanical design drawings, as appropriate, structural design drawings define the work that is to be performed on a project. For structural steel buildings and bridges, the fabricator uses the design drawings produced by the engineer to produce shop drawings, which define each individual structural steel piece that is to be produced, and erection drawings, which define where the pieces are placed in the field. Structural design drawings generally include plans, elevations, sections, details, schedules, and notes.</p> <h2 id=\"notes\">Notes</h2> <p>Notes are text and can appear throughout a drawing set. When placed at the front of a set and titled GENERAL NOTES, the information is applicable to all sheets and all disciplines. GENERAL STRUCTURAL NOTES, or just STRUCTURAL NOTES, apply to all sheets of the structural drawings. Information on these drawings include the code to which the structure was designed, key design criteria (e.g., live loads, wind speed, seismic design category), and typical material specifications. For example, structural notes may include a statement that W-SHAPES SHALL CONFORM TO ASTM A992, GRADE 50 UNLESS NOTED OTHERWISE. The term “unless noted otherwise”, sometimes abbreviated U.N.O., allows flexibility should a specific wide-flange member need to be of a different grade.</p> <h2 id=\"plans\">Plans</h2> <p>Plans show a view from above. For buildings, there is typically a plan for the foundation, each floor, and the roof. Information on plans includes location of columns, the layout and size of floor framing members, and floor elevations.</p> <h2 id=\"elevations\">Elevations</h2> <p>Elevations show a view from the front or the side. They can be used to communicate the design of braced frames or other vertically oriented portions of a structure.</p> <h2 id=\"sections\">Sections</h2> <p>Sections show a view of the structure as if it has been cut along an imaginary plane. They are used to communicate information that cannot be easily seen in plans or elevations. Each section is referenced from another drawing. The drawing where the section is referenced must indicate the cutting plane and viewing direction.</p> <h2 id=\"details\">Details</h2> <p>Details show portions of the structure in more detail than is possible in a plan, elevation, or section. The view of the detail is the same as that of the drawing from which it is referenced. Some details are listed as typical, which means they apply in more than one location. When developing typical details, it is important to ensure that they are general enough to apply in each location while still communicating the design information.</p> <h2 id=\"schedules\">Schedules</h2> <p>Schedules show information in tabular format. They are helpful for efficiently communicating the details of components of a structure that are repetitive and fit a pattern but are not identical.</p> `;\n// Exports\nexport default code;","// Module\nvar code = `<h1 id=\"abbreviations\">Abbreviations</h1> <p>Abbreviations commonly used in structural drawings include:</p> <div class=\"properties\"> <table> <tbody> <tr class=\"odd\"> <td>COL</td> <td>Column</td> </tr> <tr class=\"even\"> <td>DIA</td> <td>Diameter</td> </tr> <tr class=\"odd\"> <td>FS</td> <td>Far side</td> </tr> <tr class=\"even\"> <td>FTG</td> <td>Footing</td> </tr> <tr class=\"odd\"> <td>LLBB</td> <td>Long legs back-to-back</td> </tr> <tr class=\"even\"> <td>LLH</td> <td>Long leg horizontal</td> </tr> <tr class=\"odd\"> <td>LLV</td> <td>Long leg vertical</td> </tr> <tr class=\"even\"> <td>NS</td> <td>Near side</td> </tr> <tr class=\"odd\"> <td>OVS</td> <td>Oversize</td> </tr> <tr class=\"even\"> <td>PL</td> <td>Plate</td> </tr> <tr class=\"odd\"> <td>SLBB</td> <td>Short legs back-to-back</td> </tr> <tr class=\"even\"> <td>STL</td> <td>Steel</td> </tr> <tr class=\"odd\"> <td>STD</td> <td>Standard</td> </tr> <tr class=\"even\"> <td>UNO</td> <td>Unless noted otherwise</td> </tr> </tbody> </table> </div> `;\n// Exports\nexport default code;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t62: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkaisc_model_viewer\"] = self[\"webpackChunkaisc_model_viewer\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [321,870], () => (__webpack_require__(4574)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","URL","title","groups","name","items","content","linework","contributors","addGuideLink","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","O","result","chunkIds","fn","priority","notFulfilled","Infinity","i","length","fulfilled","j","Object","keys","every","key","splice","r","d","definition","o","defineProperty","enumerable","get","g","globalThis","this","Function","e","window","obj","prop","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","test","Error","replace","p","b","baseURI","self","href","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","data","moreModules","runtime","some","id","chunkLoadingGlobal","forEach","bind","push","__webpack_exports__"],"sourceRoot":""}